Program = _{ SOI ~ Methods ~ EOI }

Methods = { Method* }

Method = { VoidMethod | NonVoidMethod | Main }

VoidMethod = {
    DeclareMethod
    ~ Arguments
    ~ Statements
    ~ EndMethodDeclaration
}

NonVoidMethod = {
    DeclareMethod
    ~ Arguments
    ~ NotVoidMethod
    ~ Statements
    ~ ReturnStatement
    ~ EndMethodDeclaration
}

Arguments = { (MethodArgument ~ Identifier)* }

Main = { 
    BeginMain 
    ~ PrintStatement
    ~ EndMain }

Value = { Identifier }

Statements = { Statement* ~ Statement }

Statement = {
    AssignStatement
    | AssignFromMethodStatement
    | PrintStatement
}

AssignStatement = {
    AssignVariable ~ Identifier
    ~ SetValue ~ Value
    ~ Operator*
    }

AssignFromMethodStatement = {
    AssignVariableFromMethodCall ~ Identifier
    ~ CallMethod ~ Value
    ~ Operator*
}

Operator = {
    (Add ~ Value)
    | (Sub ~ Value)
}

PrintStatement = { Print ~ (Identifier | String) }

ReturnStatement = { Return ~ Identifier }

Identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }

String  = @{ "\"" ~ Inner ~ "\"" }
Inner   = @{ (!("\"" | "\\") ~ ANY)* ~ (Escape ~ Inner)? }
Escape  = @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" ) }

WHITESPACE = _{ " " | "\t" | NEWLINE }

BeginMain = _{ "Do it" }
EndMain = _{ "May The Force be with you" }
Print = _{ "The Sacred Texts!" }
DeclareMethod = _{ "This is where the fun begins" }
MethodArgument = _{ "Now that’s a name I have not heard in a long time, a long time" }
NotVoidMethod = _{ "It's a trap" }
Return = _{ "You’re all clear kid, let's blow this thing and go home" }
EndMethodDeclaration = _{ "It is clear to me the Republic no longer functions" }
AssignVariable = _{ "AssignVariable" }
AssignVariableFromMethodCall = _{ "AssignVariableFromMethodCall" }
EndAssignVariable = _{ "EndAssignVariable" }
SetValue = _{ "SetValue" }
CallMethod = _{ "CallMethod" }
If = _{ "If" }
Else = _{ "Else" }
EndIf = _{ "EndIf" }
Add = _{ "Add" }
Sub = _{ "Sub" }
