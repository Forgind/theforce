Program = _{ SOI ~ Methods ~ EOI }

Methods = { Method* }

Method = _{ VoidMethod | NonVoidMethod | Main }

VoidMethod = {
    DeclareMethod
    ~ Arguments
    ~ Statements
    ~ EndMethodDeclaration
}

NonVoidMethod = {
    DeclareMethod
    ~ Arguments
    ~ NotVoidMethod
    ~ Statements
    ~ ReturnStatement
    ~ EndMethodDeclaration
}

Arguments = { (MethodArgument ~ VariableName)* }

Main = { 
    BeginMain 
    ~ Statements
    ~ EndMain }

Statements = _{ Statement* }

Statement = _{
    DeclareBooleanStatement
    | DeclareFloatStatement
    | DeclareStringStatement
    | AssignStatement
    | AssignFromMethodStatement
    | PrintStatement
    | Noop
}

DeclareBooleanStatement = {
    DeclareBool ~ VariableName
    ~ SetInitalValue ~ (Boolean | VariableName)
}

DeclareFloatStatement = {
    DeclareFloat ~ VariableName
    ~ SetInitalValue ~ (Float | VariableName)
}

DeclareStringStatement = {
    DeclareString ~ VariableName
    ~ SetInitalValue ~ (String | VariableName)
}

AssignStatement = {
    AssignVariable ~ VariableName
    ~ SetValue ~ Value
    ~ Operator*
    ~ EndAssignVariable
    }

AssignFromMethodStatement = {
    AssignVariableFromMethodCall ~ VariableName
    ~ CallMethod ~ Value
    ~ Operator*
    ~ EndAssignVariable
}

Operator = _{ UnaryOperator | BinaryOperator }

UnaryOperator = { Not }

BinaryOperator = _{
    AddOperator
    | SubtractOperator
    | MultiplyOperator
    | DivideOperator
    | ExponentOperator
    | ModulusOperator
    | EqualOperator
    | GreaterThanOperator
    | LessThanOperator
    | OrOperator
    | AndOperator
}

AddOperator = { Add ~ Value }
SubtractOperator = { Subtract ~ Value }
MultiplyOperator = { Multiply ~ Value }
DivideOperator = { Divide ~ Value }
ExponentOperator = { Exponent ~ Value }
ModulusOperator = { Modulus ~ Value }
EqualOperator = { Equal ~ Value }
GreaterThanOperator = { GreaterThan ~ Value }
LessThanOperator = { LessThan ~ Value }
OrOperator = { Or ~ Value }
AndOperator = { And ~ Value }

PrintStatement = { Print ~ Value }

ReturnStatement = { Return ~ Value }

Value = _{ VariableName | String | Float | Boolean }

VariableName = { Identifier }

MethodName = { Identifier }

Identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }

Float = @{ "-"? ~ ASCII_DIGIT+  ~ "."? ~ ASCII_DIGIT* }

Boolean = { True | False }

True = { "From a certain point of view." }
False = { "No, that's not true. That's impossible!" }

String  = @{ "\"" ~ Inner ~ "\"" }
Inner   = @{ (!("\"" | "\\") ~ ANY)* ~ (Escape ~ Inner)? }
Escape  = @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" ) }

WHITESPACE = _{ " " | "\t" | NEWLINE }

BeginMain = _{ "Do it!" }
EndMain = _{ "May The Force be with you." }
Print = _{ "The Sacred Texts!" }
DeclareMethod = _{ "This is where the fun begins." }
MethodArgument = _{ "Now that’s a name I have not heard in a long time, a long time." }
NotVoidMethod = _{ "It's a trap!" }
Return = _{ "You’re all clear kid, let's blow this thing and go home." }
EndMethodDeclaration = _{ "It is clear to me the Republic no longer functions." }
AssignVariable = _{ "What a piece of junk!" }
AssignVariableFromMethodCall = _{ "Many Bothans died to bring us this information." }
EndAssignVariable = _{ "The garbage will do." }
SetValue = _{ "I am your father." }
CallMethod = _{ "I have a bad feeling about this." }
If = _{ "Do or do not." }
Else = _{ "These aren’t the droids you’re looking for." }
EndIf = _{ "You have failed me for the last time." }
Not = { "Always with you what cannot be done." }
Add = _{ "This will make a fine addition to my collection." }
Subtract = _{ "Proceed with the countdown." }
Multiply = _{ "There's too many of them!" }
Divide = _{ "Not to worry, at least we are flying half a ship." }
Exponent = _{ "Unlimited power!" }
Modulus = _{ "Never tell me the odds!" }
Equal = _{ "You're a Jedi too, nice to meet you." }
GreaterThan = _{ "There is always a bigger fish." }
LessThan = _{ "Impressive. Most impressive." }
Or = _{ "As you wish." }
And = _{ "There is another." }
DeclareFloat = _{ "Yoda, you seek Yoda." }
DeclareString = _{ "Size matters not." }
DeclareBool = _{ "I am the senate!" }
SetInitalValue = _{ "Whoosa are youssa?" }
Noop = _{ "Move along. Move along." }
