Program = _{ SOI ~ Functions ~ EOI }

Functions = { Function* }

Function = _{ VoidFunction | NonVoidFunction | Main }

VoidFunction = {
    DeclareFunction ~ FunctionName
    ~ Parameters
    ~ Void
    ~ Statements
    ~ EndFunctionDeclaration
}

NonVoidFunction = {
    DeclareFunction ~ FunctionName
    ~ Parameters
    ~ Statements
    ~ ReturnStatement
    ~ EndFunctionDeclaration
}

Parameters = { (FunctionParameters ~ VariableName)* }

Main = {
    BeginMain
    ~ Statements
    ~ EndMain }

Statements = _{ Statement* }

Statement = _{
    DeclareBooleanStatement
    | DeclareFloatStatement
    | DeclareStringStatement
    | AssignStatement
    | AssignFromFunctionStatement
    | PrintStatement
    | ReadFloatStatement
    | ReadStringStatement
    | ReadBooleanStatement
    | ForStatement
    | WhileStatement
    | IfStatement
    | CallFunctionStatement
    | Noop
}

DeclareBooleanStatement = {
    DeclareBool ~ VariableName
    ~ SetInitialValue ~ (Boolean | VariableName)
}

DeclareFloatStatement = {
    DeclareFloat ~ VariableName
    ~ SetInitialValue ~ (Float | VariableName)
}

DeclareStringStatement = {
    DeclareString ~ VariableName
    ~ SetInitialValue ~ (String | VariableName)
}

AssignStatement = {
    AssignVariable ~ VariableName
    ~ SetValue ~ Value
    ~ Operator*
    ~ EndAssignVariable
}

AssignFromFunctionStatement = {
    AssignVariableFromFunctionCall ~ VariableName
    ~ CallFunctionStatement
    ~ Operator*
    ~ EndAssignVariable
}

PrintStatement = { Print ~ Value }

ReadFloatStatement = { ReadFloat ~ VariableName }
ReadStringStatement = { ReadString ~ VariableName }
ReadBooleanStatement = { ReadBoolean ~ VariableName }

ForStatement = {
    For ~ Value
    ~ ForStart ~ VariableName
    ~ Statements
    ~ EndFor
}

WhileStatement = {
    While ~ Value
    ~ Statements
    ~ EndWhile
}

IfStatement = {
    If ~ Value
    ~ Statements
    ~ ElseClause?
    ~ EndIf
}

CallFunctionStatement = {
    CallFunction ~ FunctionName
    ~ Arguments
}

Arguments = { (PassArgument ~ Value)* }

ElseClause = { Else ~ Statements }

ReturnStatement = { Return ~ Value }

Operator = _{ UnaryOperator | BinaryOperator }

UnaryOperator = _{ NotOperator }

NotOperator = { Not }

BinaryOperator = _{
    AddOperator
    | SubtractOperator
    | MultiplyOperator
    | DivideOperator
    | ExponentOperator
    | ModulusOperator
    | EqualOperator
    | GreaterThanOperator
    | LessThanOperator
    | OrOperator
    | AndOperator
}

AddOperator = { Add ~ Value }
SubtractOperator = { Subtract ~ Value }
MultiplyOperator = { Multiply ~ Value }
DivideOperator = { Divide ~ Value }
ExponentOperator = { Exponent ~ Value }
ModulusOperator = { Modulus ~ Value }
EqualOperator = { Equal ~ Value }
GreaterThanOperator = { GreaterThan ~ Value }
LessThanOperator = { LessThan ~ Value }
OrOperator = { Or ~ Value }
AndOperator = { And ~ Value }

Value = _{ Boolean | Float | String | VariableName  }

VariableName = { Identifier }

FunctionName = { Identifier }

Identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }

Float = @{ "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

Boolean = { True | False }

True = { "From a certain point of view." }
False = { "That's impossible!" }

String = ${ "\"" ~ Inner ~ "\"" }
Inner = { Characters ~ (Escape ~ Inner)? }

Characters = @{ Character* }
Character = @{ !("\"" | "\\") ~ ANY }
Escape = @{ "\\" ~ ("\"" | "\\" | "/" | "n" | "r" | "t") }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("|-o-|" | ":><:" | "<(-.-)>") ~ (!NEWLINE ~ ANY)* }

BeginMain = _{ "Do it!" | "BeginMain" }
EndMain = _{ "May The Force be with you." | "EndMain" }
Print = _{ "The Sacred Jedi Texts!" | "Print" }
DeclareFunction = _{ "This is where the fun begins." | "DeclareFunction" }
FunctionParameters = _{ "Now, that's a name I've not heard in a long time. A long time." | "FunctionParameters" }
Void = _{ "It's a trap!" | "Void" }
Return = _{ "You're all clear, kid. Now let's blow this thing and go home." | "Return" }
EndFunctionDeclaration = _{ "You cannot escape your destiny." | "EndFunctionDeclaration" }
AssignVariable = _{ "What a piece of junk!" | "AssignVariable" }
AssignVariableFromFunctionCall = _{ "Many Bothans died to bring us this information." | "AssignVariableFromFunctionCall" }
EndAssignVariable = _{ "The garbage will do." | "EndAssignVariable" }
SetValue = _{ "I am your father." | "SetValue" }
CallFunction = _{ "I have a bad feeling about this." | "CallFunction" }
Not = _{ "Always with you it cannot be done." | "Not" }
Add = _{ "Your lightsabers will make a fine addition to my collection." | "Add" }
Subtract = _{ "Proceed with the countdown." | "Subtract" }
Multiply = _{ "There's too many of them!" | "Multiply" }
Divide = _{ "Not to worry, we are still flying half a ship." | "Divide" }
Exponent = _{ "Unlimited power!" | "Exponent" }
Modulus = _{ "Never tell me the odds!" | "Modulus" }
Equal = _{ "I am a Jedi, like my father before me." | "Equal" }
GreaterThan = _{ "Impressive. Most impressive." | "GreaterThan" }
LessThan = _{ "There's always a bigger fish." | "LessThan" }
Or = _{ "There is another." | "Or" }
And = _{ "As you wish." | "And" }
DeclareFloat = _{ "Size matters not." | "DeclareFloat" }
DeclareString = _{ "Yoda. You seek Yoda." | "DeclareString" }
DeclareBool = _{ "I am the Senate!" | "DeclareBool" }
SetInitialValue = _{ "Who, mesa?" | "SetInitialValue" }
Noop = _{ "Move along. Move along." | "Noop" }
While = _{ "Here we go again." | "While" }
EndWhile = _{ "Let the past die." | "EndWhile" }
If = _{ "Do, or do not. There is no try." | "If" }
Else = _{ "These aren't the droids you're looking for." | "Else" }
EndIf = _{ "You have failed me for the last time." | "EndIf" }
PassArgument = _{ "I'll try spinning, that's a good trick." | "PassArgument" }
For = _{ "For over a thousand generations." | "For" }
ForStart = _{ "Let the Wookiee win." | "ForStart" }
EndFor = _{ "It is clear to me now the Republic no longer functions." | "EndFor" }
ReadFloat = _{ "Now this is podracing!" | "ReadFloat" }
ReadString = _{ "Looking? Found someone, you have, I would say." | "ReadString" }
ReadBoolean = _{ "I hope you know what you're doing." | "ReadBoolean" }
